<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>多态 on Hov&#39;s Blog</title>
    <link>https://HauyuChen.github.io/topics/%E5%A4%9A%E6%80%81/</link>
    <description>Recent content in 多态 on Hov&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017. All rights reserved.</copyright>
    <lastBuildDate>Wed, 20 Sep 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://HauyuChen.github.io/topics/%E5%A4%9A%E6%80%81/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>谈谈向上转型、向下转型</title>
      <link>https://HauyuChen.github.io/post/java-%E5%90%91%E4%B8%8A%E8%BD%AC%E5%9E%8B%E5%90%91%E4%B8%8B%E8%BD%AC%E5%9E%8B/</link>
      <pubDate>Wed, 20 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://HauyuChen.github.io/post/java-%E5%90%91%E4%B8%8A%E8%BD%AC%E5%9E%8B%E5%90%91%E4%B8%8B%E8%BD%AC%E5%9E%8B/</guid>
      <description>版权声明：本文由 Hov 所有，发布于 http://chenhy.com ，转载请注明出处。

0 写在前面 某天下午，群上抛出了一个关于 Java 向上转型的问题。


于是，我们以此为开端讨论了一个下午，从多态到类加载顺序。讨论完毕，想着是不是要写篇文章记录下，所以有了这篇文章。
本文将谈及向上转型、向下转型的概念，后续有时间将扩充多态相关的更详细的知识。

1 向上转型 1.1 概念 向上转型是指子类引用的对象转换为父类类型，通俗的说就是子类转型成父类。
举个栗子，苹果是水果的一种，但我们有时会说苹果是水果或直接把苹果说成水果。其实，这样的说法就是向上转型。
向上转型是对父类对象的方法的扩充，即父类对象可访问子类从父类中继承的和子类重写父类的方法。比如，我们熟悉的集合操作， ArrayList 是 List 的子类。
List&amp;lt;String&amp;gt; lists = new ArrayList&amp;lt;String&amp;gt;();  再比如：Apple 是 Fruit 的子类。对象变量 apple 向上转型为 Fruit 类型，但 apple 仍引用的是 Apple 对象。
Fruit apple = new Apple(); //向上转型  1.2 特性 向上转型的一个很重要的特性是，向上转型的对象会遗失子类中父类没有的方法，而且子类的同名方法会覆盖父类的同名方法。也就是说，由于向上转型，该对象对于只存在子类中而父类中不存在的方法是不能使用的。同时，若子类重写了父类的某些方法，在调用这些方法时，调用的是在子类定义的方法，这也是动态链接、动态调用。
（1）父类 Fruit
/* Fruit.java */ public class Fruit { public void name(){ System.out.println(&amp;quot;This is Fruit.</description>
    </item>
    
  </channel>
</rss>